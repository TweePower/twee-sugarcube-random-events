sugarcube-2:
  macros:
    RE:
      name: RE
      description: |-
        *Syntax:* `<<RE [[passage]]>>`

        The `<<RE>>` run random event if it pass all filters

        *Arguments:*
          * `passage`: passage name.

        *Usage:*
        ```
          <<RE [[SomePassageName]]>>
        ```
      parameters:
        - link
    REGroup:
      name: REGroup
      description: |-
        *Syntax:* `<<REGroup "groupName" 1 50>>`

        The `<<REGroup>>` find all random events with group, check all, and run one of them

        *Arguments:*
          * `groupName`: random event group name.
          * `resultCount`: count of how many random events will be displayed (default value: 1).
          * `groupThreshold`: group threshold (if not empty, it disable random event threshold validation).

        *Usage:*
        ```
          <<REGroup "SomeRandomEventGroupName">>
          <<REGroup "SomeRandomEventGroupName" 2>>
          <<REGroup "SomeRandomEventGroupName" null 50>>
          <<REGroup "SomeRandomEventGroupName" 5 50>>
        ```
      parameters:
        - string |+ number |+ number
    REEnable:
      name: REEnable
      description: |-
        *Syntax:* `<<REEnable [[passage]]>>`

        The `<<REEnable>>` enable random event

        *Arguments:*
          * `passage`: passage name.

        *Usage:*
        ```
          <<REEnable [[SomePassageName]]>>
        ```
      parameters:
        - link
    REDisable:
      name: REDisable
      description: |-
        *Syntax:* `<<REDisable [[passage]]>>`

        The `<<REDisable>>` disable random event

        *Arguments:*
          * `passage`: passage name.

        *Usage:*
        ```
          <<REDisable [[SomePassageName]]>>
        ```
      parameters:
        - link
    REEnableByTag:
      name: REEnableByTag
      description: |-
        *Syntax:* `<<REEnableByTag "tag">>`

        The `<<REEnableByTag>>` find all random events by tag and enable them

        *Arguments:*
          * `tag`: random event tag.

        *Usage:*
        ```
          <<REEnableByTag "MyTag">>
        ```
      parameters:
        - string
    REDisableByTag:
      name: REDisableByTag
      description: |-
        *Syntax:* `<<REDisableByTag "tag">>`

        The `<<REDisableByTag>>` find all random events by tag and disable them

        *Arguments:*
          * `tag`: random event tag.

        *Usage:*
        ```
          <<REDisableByTag "MyTag">>
        ```
      parameters:
        - string
    REReset:
      name: REReset
      description: |-
        *Syntax:* `<<REReset [[passage]]>>`

        The `<<REReset>>` reset random event counter
        Note: Don't clear any tags, limitation with tags will be active after it

        *Arguments:*
          * `passage`: passage name.

        *Usage:*
        ```
          <<REReset [[SomePassageName]]>>
        ```
      parameters:
        - link
    REResetByTag:
      name: REResetByTag
      description: |-
        *Syntax:* `<<REResetByTag "tag">>`

        The `<<REResetByTag>>` reset tag counter, find all random events by tag reset counter on them and also reset all siutable tags from limitation strategy

        *Arguments:*
          * `tag`: random event tag.

        *Usage:*
        ```
          <<REResetByTag "MyTag">>
        ```
      parameters:
        - string
