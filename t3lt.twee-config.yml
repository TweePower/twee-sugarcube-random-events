sugarcube-2:
  macros:
    ChangeTime:
      name: ChangeTime
    PassageMetadata:
      name: PassageMetadata
      container: true
      description: |-
        *Syntax:* `<<PassageMetadata>>{...metadata here...}<</PassageMetadata>>`

        The `<<PassageMetadata>>` add metadata to you passage

        *Usage:*
        ```
          <<PassageMetadata>>{
              isEnabled: true,
              type: "goto",
              threshold: 100,
              filter: `true`,
              tags: ["Place", "Daily", "Weekly", "$CurrentDayTime"],
              groups: [
                  {
                      name: "GroupName",
                      weight: 10,
                      type: "sequential",
                      sequentialIndex: 1,
                      sequentialCount: 1
                  },
              ],
              limitationStrategy: [
                  { max: 1, tags: ["Place", "Morning"], isSeparate: true },
                  { max: 1, tags: ["Place", "Noon"], isSeparate: true },
                  { max: 1, tags: ["Place", "Afternoon"], isSeparate: true },
                  { max: 1, tags: ["Place", "Evening"], isSeparate: true },
                  { max: 1, tags: ["Place", "Night"], isSeparate: true },
                  { max: 1, tags: ["Place", "Daily"], isSeparate: true },
                  { max: 1, tags: ["Place", "Weekly"], isSeparate: true },
              ]
          }<</PassageMetadata>>
        ```
    AddCodeBlock:
      name: AddCodeBlock
      container: true
      description: |-
        *Syntax:* `<<AddCodeBlock [[showHideLinkText]] [[language]]>>`

        The `<<AddCodeBlock>>` pritnt passage code

        *Arguments:*
          * `showHideLinkText`: show/hide link text (default: null), don't add show/hide link if argument not setted
          * `language`: language format (default: 'xml', possible values: 'xml', 'json', 'javascript', 'css').

        *Usage:*
        ```
          <<AddCodeBlock>>[[ SOME CODE HERE ]]<</AddCodeBlock>>
          <<AddCodeBlock "show/hide json">>[[  SOME CODE HERE ]]<</AddCodeBlock>>
          <<AddCodeBlock "show/hide json" "json">>[[ SOME CODE HERE ]]<</AddCodeBlock>>
        ```
      parameters:
        - "|+ string |+ string"

    PassageCode:
      name: PassageCode
      description: |-
        *Syntax:* `<<PassageCode [[passage]]>>`

        The `<<PassageCode>>` pritnt passage code

        *Arguments:*
          * `passage`: passage name.

        *Usage:*
        ```
          <<PassageCode [[SomePassageName]]>>
        ```
      parameters:
        - link
    RE:
      name: RE
      description: |-
        *Syntax:* `<<RE [[passage]]>>`

        The `<<RE>>` run random event if it pass all filters

        *Arguments:*
          * `passage`: passage name.

        *Usage:*
        ```
          <<RE [[SomePassageName]]>>
        ```
      parameters:
        - link
    REGroup:
      name: REGroup
      description: |-
        *Syntax:* `<<REGroup "groupName" 50>>`

        The `<<REGroup>>` find all random events with group, check all, and run one of them

        *Arguments:*
          * `groupName`: random event group name.
          * `groupThreshold`: group threshold.

        *Usage:*
        ```
          <<REGroup "SomeRandomEventGroupName">>
          <<REGroup "SomeRandomEventGroupName" 50>>
        ```
      parameters:
        - string |+ number
    REEnable:
      name: REEnable
      description: |-
        *Syntax:* `<<REEnable [[passage]]>>`

        The `<<REEnable>>` enable random event

        *Arguments:*
          * `passage`: passage name.

        *Usage:*
        ```
          <<REEnable [[SomePassageName]]>>
        ```
      parameters:
        - link
    REDisable:
      name: REDisable
      description: |-
        *Syntax:* `<<REDisable [[passage]]>>`

        The `<<REDisable>>` disable random event

        *Arguments:*
          * `passage`: passage name.

        *Usage:*
        ```
          <<REDisable [[SomePassageName]]>>
        ```
      parameters:
        - link
    REEnableByTag:
      name: REEnableByTag
      description: |-
        *Syntax:* `<<REEnableByTag "tag">>`

        The `<<REEnableByTag>>` find all random events by tag and enable them

        *Arguments:*
          * `tag`: random event tag.

        *Usage:*
        ```
          <<REEnableByTag "MyTag">>
        ```
      parameters:
        - string
    REDisableByTag:
      name: REDisableByTag
      description: |-
        *Syntax:* `<<REDisableByTag "tag">>`

        The `<<REDisableByTag>>` find all random events by tag and disable them

        *Arguments:*
          * `tag`: random event tag.

        *Usage:*
        ```
          <<REDisableByTag "MyTag">>
        ```
      parameters:
        - string
    REReset:
      name: REReset
      description: |-
        *Syntax:* `<<REReset [[passage]]>>`

        The `<<REReset>>` reset random event counter
        Note: Don't clear any tags, limitation with tags will be active after it

        *Arguments:*
          * `passage`: passage name.

        *Usage:*
        ```
          <<REReset [[SomePassageName]]>>
        ```
      parameters:
        - link
    REResetByTag:
      name: REResetByTag
      description: |-
        *Syntax:* `<<REResetByTag "tag">>`

        The `<<REResetByTag>>` reset tag counter, find all random events by tag reset counter on them and also reset all siutable tags from limitation strategy

        *Arguments:*
          * `tag`: random event tag.

        *Usage:*
        ```
          <<REResetByTag "MyTag">>
        ```
      parameters:
        - string
